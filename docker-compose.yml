networks:
  microservice-network:
    driver: bridge

services:
  redis:
    image: redis:7.0
    container_name: redis-container
    networks:
      - microservice-network
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  auth-api:
    build:
      context: ./auth-api
    container_name: auth-api-container
    networks:
      - microservice-network
    environment:
      - JWT_SECRET=PRFT
      - AUTH_API_PORT=8000
      - ZIPKIN_URL=http://zipkin:9411/
      - USERS_API_ADDRESS=http://users-api-container:8083
    ports:
      - "8000:8000"

  users-api:
    build:
      context: ./users-api
    container_name: users-api-container
    networks:
      - microservice-network
    environment:
      - JWT_SECRET=PRFT
      - SERVER_PORT=8083
      - ZIPKIN_URL=http://zipkin:9411/
    ports:
      - "8083:8083"

  todos-api:
    build:
      context: ./todos-api
    container_name: todos-api-container
    networks:
      - microservice-network
    environment:
      - JWT_SECRET=PRFT
      - TODO_API_PORT=8082
      - REDIS_HOST=redis-container
      - REDIS_PORT=6379
      - ZIPKIN_URL=http://zipkin:9411/
      - REDIS_CHANNEL=todos_channel
    ports:
      - "8082:8082"

  log-message-processor:
    build:
      context: ./log-message-processor
    container_name: log-message-processor-container
    networks:
      - microservice-network
    environment:
      - REDIS_HOST=redis-container
      - REDIS_PORT=6379
      - REDIS_CHANNEL=log_channel
      - ZIPKIN_URL=http://zipkin:9411/
    depends_on:
      redis:
        condition: service_healthy

  frontend:
    build:
      context: ./frontend
    container_name: frontend-container
    networks:
      - microservice-network
    environment:
      - PORT=8080
      - AUTH_API_ADDRESS=http://auth-api-container:8000
      - TODOS_API_ADDRESS=http://todos-api-container:8082
      - ZIPKIN_URL=http://zipkin:9411/
    ports:
      - "8080:8080"
  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin-container
    networks:
      - microservice-network
    ports:
      - "9411:9411"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9411/"]
      interval: 10s
      timeout: 5s
      retries: 5
    # --- SERVICIOS DE MONITOREO ---
  prometheus:
    image: prom/prometheus
    container_name: prometheus-container
    networks:
      - microservice-network
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml # Archivo de configuraci√≥n
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    depends_on:
      - redis
      - auth-api
      - users-api
      - todos-api

  grafana:
    image: grafana/grafana
    container_name: grafana-container
    networks:
      - microservice-network
    ports:
      - "3000:3000"
    volumes:
      - grafana-storage:/var/lib/grafana # Persistencia de datos
      - ./datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
    depends_on:
      - prometheus

volumes:
  grafana-storage:
