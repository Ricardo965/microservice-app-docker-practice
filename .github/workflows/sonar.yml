name: Build

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest

    steps:
      # ✅ 1. Descargar el código del repositorio
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Importante para un análisis completo

      # ✅ 2. Configurar Java 8 para compilar `users-api`
      - name: ☕ Set up Java 8
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "8"

      # ✅ 3. Compilar Java (users-api)
      - name: 🏗️ Build Java (users-api)
        run: |
          cd users-api
          mvn clean package -DskipTests  # Evita correr tests en esta fase

      # ✅ 4. Configurar Go Modules (sin compilar)
      - name: 🏗️ Setup Go (auth-api)
        run: |
          cd auth-api
          export GO111MODULE=on
          go mod init auth-api || true  # Evita error si ya existe
          go mod tidy  # Descarga dependencias

      # ✅ 5. Ejecutar análisis con SonarQube
      - name: 🔍 Run SonarQube analysis
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.java.binaries=target/classes

      # (Opcional) ✅ 6. Falla el pipeline si la Quality Gate no pasa
      # - name: 🚨 Check SonarQube Quality Gate
      #   uses: SonarSource/sonarqube-quality-gate-action@v1
      #   timeout-minutes: 5
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
